{"version":3,"sources":["hoc/withAuthRedirect.js","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Dialogs/Message/Message.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["mapStateToPropsForRedirect","state","isAuth","authData","isAuthorised","isInProcess","isAuthInProcess","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","DialogItem","className","s","dialogsItems","id","name","Message","message","src","alt","maxLength","maxLengthCreator","SendMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","TextArea","validate","requiredField","inputMessage","btnSendMessage","Dialogs","formatedDialogData","dialogsData","dialogs","map","elem","formatedMessagesData","messages","formData","messTxtValue","addDialogMessage","compose"],"mappings":"sNAIIA,EAA6B,SAACC,GAAD,MAAY,CACzCC,OAAQD,EAAME,SAASC,aACvBC,YAAaJ,EAAME,SAASG,kBAGnBC,EAAmB,SAACC,GAAe,IACtCC,EADqC,iLAGnC,OAAKC,KAAKC,MAAMT,OACT,kBAACM,EAAeE,KAAKC,OADG,kBAAC,IAAD,CAAUC,GAAI,eAHV,GACXC,IAAML,WAOtC,OAAOM,YAAQd,EAARc,CAAoCL,K,oBChB/CM,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,aAAe,8BAA8B,eAAiB,kC,oBCAtOD,EAAOC,QAAU,CAAC,QAAU,4BAA4B,aAAe,iCAAiC,OAAS,6B,oBCAjHD,EAAOC,QAAU,CAAC,SAAW,0BAA0B,QAAU,2B,gHCYlDC,EATI,SAACN,GAChB,OACI,yBAAKO,UAAWC,IAAEC,cACd,kBAAC,IAAD,CAASR,GAAI,YAAcD,EAAMU,IAAKV,EAAMW,Q,kBCOzCC,EAVC,SAACZ,GACb,OACI,yBAAKO,UAAWC,IAAEK,SACd,yBACIC,IAAI,wEAAwEC,IAAI,UACpF,8BAAOf,EAAMa,W,yCCkCrBG,EAAYC,YAAiB,KAc3BC,EAAuBC,YAAU,CAACC,KAAM,mBAAjBD,EAZL,SAACnB,GACrB,OAAO,0BAAMqB,SAAUrB,EAAMsB,cACzB,6BACI,kBAACC,EAAA,EAAD,CAAOC,YAAa,qBAAsBb,KAAM,eACzCc,UAAWC,IAAUC,SAAU,CAACC,IAAeZ,GAAYT,UAAWC,IAAEqB,gBAEnF,6BACI,4BAAQtB,UAAWC,IAAEsB,gBAArB,aAOGC,EAjDC,SAAC/B,GAGb,IAAKA,EAAMT,OAAQ,OAAO,kBAAC,IAAD,CAAUU,GAAI,WAGxC,IAAI+B,EAAqBhC,EAAMiC,YAAYC,QAAQC,KAAI,SAACC,GACpD,OAAO,kBAAC,EAAD,CAAYzB,KAAMyB,EAAKzB,KAAMD,GAAI0B,EAAK1B,QAG7C2B,EAAuBrC,EAAMiC,YAAYK,SAASH,KAAI,SAACC,GACvD,OAAO,kBAAC,EAAD,CAASvB,QAASuB,EAAKvB,QAASH,GAAI0B,EAAK1B,QASpD,OACI,yBAAKH,UAAWC,IAAE0B,SACd,yBAAK3B,UAAWC,IAAEC,cACbuB,GAEL,yBAAKzB,UAAWC,IAAE8B,UACbD,EACD,kBAACnB,EAAD,CAAsBG,SAZjB,SAACkB,GAAc,IACvBC,EAAgBD,EAAhBC,aACLxC,EAAMyC,iBAAiBD,S,wBCfhBE,sBACXvC,aAPoB,SAACb,GACrB,MAAO,CACH2C,YAAa3C,EAAM2C,eAKE,CAACQ,uBAC1B7C,IAFW8C,CAGbX","file":"static/js/4.0dda377a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.authData.isAuthorised,\r\n    isInProcess: state.authData.isAuthInProcess\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render () {\r\n            if (!this.props.isAuth) return <Redirect to={\"/login\"}/>;\r\n            return <Component  {...this.props}/>\r\n        }\r\n    }\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__12HX7\",\"dialogsItems\":\"Dialogs_dialogsItems__2EKR9\",\"active\":\"Dialogs_active__2OfC7\",\"messages\":\"Dialogs_messages__1O0BJ\",\"inputMessage\":\"Dialogs_inputMessage__3SgSD\",\"btnSendMessage\":\"Dialogs_btnSendMessage__2EXCb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"DialogItem_dialogs__2Cr-H\",\"dialogsItems\":\"DialogItem_dialogsItems__P02DH\",\"active\":\"DialogItem_active__3hPhD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messages\":\"Message_messages__pbb-I\",\"message\":\"Message_message__1yHBd\"};","import React from \"react\";\r\nimport s from './DialogItem.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n    return (\r\n        <div className={s.dialogsItems}>\r\n            <NavLink to={\"/dialogs/\" + props.id}>{props.name}</NavLink>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from './Message.module.css'\r\n//import {NavLink} from \"react-router-dom\";\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={s.message}>\r\n            <img\r\n                src='https://cdn3.iconfinder.com/data/icons/avatars-15/64/_Ninja-2-512.png' alt=\"ninja\"></img>\r\n            <span>{props.message}</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Message;","import React from \"react\";\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from './DialogItem/DialogItem'\r\nimport Message from \"./Message/Message\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, requiredField} from \"../../utils/validators/validators\";\r\nimport {TextArea} from \"../../utils/validators/customTextArea\";\r\n\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    // Если не в системе переход на страницу логина\r\n    if (!props.isAuth) return <Redirect to={\"/login\"}/>;\r\n\r\n    // данные для отрисовки списка чатов на странице Messages\r\n    let formatedDialogData = props.dialogsData.dialogs.map((elem) => {\r\n        return <DialogItem name={elem.name} id={elem.id}/>;\r\n    });\r\n    // данные для отрисовки списка сообщений на странице Messages\r\n    let formatedMessagesData = props.dialogsData.messages.map((elem) => {\r\n        return <Message message={elem.message} id={elem.id}/>\r\n    });\r\n\r\n    // обработка события Send Message\r\n    const onSubmit = (formData) => {\r\n        let {messTxtValue} = formData;\r\n        props.addDialogMessage(messTxtValue);\r\n    };\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {formatedDialogData}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {formatedMessagesData}\r\n                <SendMessageReduxForm onSubmit={onSubmit}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nlet maxLength = maxLengthCreator(100);\r\n\r\nconst SendMessageForm = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field placeholder={'Say hello to momy!'} name={\"messTxtValue\"}\r\n                   component={TextArea} validate={[requiredField, maxLength]} className={s.inputMessage}/>\r\n        </div>\r\n        <div>\r\n            <button className={s.btnSendMessage}>Send</button>\r\n        </div>\r\n    </form>\r\n};\r\n                                            //  a unique name for the form\r\nconst SendMessageReduxForm = reduxForm({form: 'sendMessageForm'})(SendMessageForm);\r\n\r\nexport default Dialogs;","import {addDialogMessage} from \"../../redux/dialogsReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nconst mapToStateProps = (state) => {\r\n    return {\r\n        dialogsData: state.dialogsData,\r\n    };\r\n};\r\n\r\nexport default compose(\r\n    connect(mapToStateProps, {addDialogMessage}),\r\n    withAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}