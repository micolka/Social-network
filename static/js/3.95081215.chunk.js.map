{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Profile/MyPosts/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/Profile.module.css","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/Profile/ProfileStatus/ProfileStatusWithHooks.tsx","components/Profile/MyPosts/ProfileInfo/ProfileDataForm.tsx","components/Profile/MyPosts/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","authData","isAuthorised","withAuthRedirect","Component","RedirectComponent","this","props","restProps","to","React","connect","module","exports","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","prototype","toString","call","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","TypeError","ProfileStatusWithHooks","useState","status","localStatus","setlocalStatus","editMode","setEditMode","useEffect","onDoubleClick","isOwner","autoFocus","onBlur","updateStatus","onChange","e","currentTarget","ProfileDataReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","createCustomField","Input","s","inputInfo","TextArea","areaInfo","type","keys","contacts","map","key","className","Contacts","formError","btnEditP","ProfileData","switchToEditMode","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","contactMean","contactValue","onClick","ProfileInfo","descriptionBlock","src","photos","large","userDefaultPhoto","alt","inputSendImage","id","target","files","savePhoto","btnSendImage","htmlFor","initialValues","formData","updateProfileInfo","userId","then","Post","item","message","likeCount","maxLength","maxLengthCreator","PublishPostReduxForm","requiredField","inputPost","btnSendPost","MyPosts","formatedPostsData","posts","elem","postsBlock","postTxtValue","addPost","MyPostsContainer","profileData","profileActions","Profile","profileBlock","profileInfo","toggleIsFetching","postContainer","ProfileContainer","UserID","match","params","clearUserProfile","showUserProfile","getUserStatus","refreshProfile","prevProps","compose","showUserProfileThunckCreator","getStatusThunckCreator","updateStatusThunckCreator","saveProfilePhotoThunckCreator","updateProfileThunckCreator","usersActions","withRouter"],"mappings":"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","file":"static/js/3.95081215.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport { AppStateType } from \"../redux/reduxStore\";\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.authData.isAuthorised\r\n});\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToPropsForRedirect>;\r\n\r\nexport const withAuthRedirect = (Component: React.ComponentType) => {\r\n    class RedirectComponent extends React.Component<MapPropsType> {\r\n        render () {\r\n            let {isAuth, ...restProps} = this.props;\r\n            if (!isAuth) return <Redirect to={\"/login\"}/>;\r\n            return <Component  {...restProps}/>\r\n        }\r\n    }\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2yzNo\",\"fontImage\":\"ProfileInfo_fontImage__33zlM\",\"btnSendImage\":\"ProfileInfo_btnSendImage__2qcAv\",\"inputSendImage\":\"ProfileInfo_inputSendImage__3NyFg\",\"Contacts\":\"ProfileInfo_Contacts__16S0c\",\"formError\":\"ProfileInfo_formError__1kllg\",\"btnEditP\":\"ProfileInfo_btnEditP__2YsO1\",\"inputInfo\":\"ProfileInfo_inputInfo__3cfJH\",\"areaInfo\":\"ProfileInfo_areaInfo__1qXCD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1giM0\",\"posts\":\"MyPosts_posts__2TNe9\",\"inputPost\":\"MyPosts_inputPost__2fOYd\",\"btnSendPost\":\"MyPosts_btnSendPost__2wq0v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2TPp4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileBlock\":\"Profile_profileBlock__fnQVW\",\"postContainer\":\"Profile_postContainer__1CiUq\",\"profileInfo\":\"Profile_profileInfo__1i-G5\"};","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}","import React, {useEffect, useState, ChangeEvent} from \"react\";\r\n\r\ntype PropsType = {\r\n    status: string\r\n    isOwner: boolean\r\n    updateStatus: (newStatus: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\r\n\r\n    // Пример использования hook / хуков\r\n    // Локальный стейт для сосхранения временного статуса и функции для его изменения\r\n    let [localStatus, setlocalStatus] = useState(props.status);\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    // Синхронизация статуса после изменения пропсов\r\n    useEffect( () => {\r\n        setlocalStatus(props.status);\r\n    },[props.status]);\r\n\r\n    // Активатор изменения статуса Юзера\r\n    const activateEditMode = () => {\r\n        if (props.isOwner) {\r\n            setEditMode(true);\r\n        }\r\n    }\r\n\r\n    const deActivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(localStatus);\r\n    }\r\n\r\n    // Метод обрабатывает изменение статуса. Отправляет инфу на сервак.\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n            setlocalStatus(e.currentTarget.value);\r\n    }\r\n\r\n    return <>\r\n        { !editMode &&\r\n        <div>\r\n            <span onDoubleClick={activateEditMode}>{props.status || '------'}</span>\r\n        </div>\r\n        }\r\n        { editMode &&\r\n        <div>\r\n            <input autoFocus={true} onBlur={deActivateEditMode}\r\n                   value={localStatus} onChange={onStatusChange}/>\r\n        </div>\r\n        }\r\n    </>\r\n\r\n};\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport {createCustomField, Input, TextArea} from '../../../../utils/validators/customTextArea'\r\nimport {reduxForm, InjectedFormProps} from \"redux-form\";\r\nimport s from './ProfileInfo.module.css'\r\nimport { ProfileType, ContactsType } from '../../../../types/types';\r\n\r\n\r\ntype FormPropsType = {\r\n    profile: ProfileType\r\n}\r\n\r\ntype FormKeysType = Extract<keyof ProfileType, string>;\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType,\r\nFormPropsType> & FormPropsType> = ({handleSubmit, profile, error}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <div>\r\n        <b>Full name: </b> {createCustomField<FormKeysType>(\"Full name\", \"fullName\",Input, [], s.inputInfo)}\r\n        </div>\r\n        <div>\r\n            <b>About me: </b> {createCustomField<FormKeysType>(\"About me\", \"aboutMe\",TextArea, [], s.areaInfo)}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job: </b> {createCustomField<FormKeysType>(\"\", \"lookingForAJob\",Input, [], null, {type: \"checkbox\"})}\r\n        </div>\r\n        <div>\r\n            <b>Job description: </b>\r\n            {createCustomField<FormKeysType>(\"Job description\", \"lookingForAJobDescription\",TextArea, [], s.areaInfo)}\r\n        </div>\r\n          <b>Contacts: </b> {Object.keys(profile.contacts).map(key => {\r\n              return <div key={key} className={s.Contacts}>\r\n                  <b>{key}</b>\r\n                  {createCustomField(profile.contacts[key as keyof ContactsType], \"contacts.\" + key, Input, [], s.inputInfo)}\r\n              </div>\r\n            })\r\n        } \r\n        {error && <div className={s.formError}>{error}</div>}\r\n        <button className={s.btnEditP}>save</button>\r\n    </form>\r\n};\r\n\r\nconst ProfileDataReduxForm = reduxForm<ProfileType, FormPropsType>({\r\n    // a unique name for the form\r\n    form: 'editProfileForm'\r\n})(ProfileDataForm);\r\n\r\nexport default ProfileDataReduxForm;","import React, { ChangeEvent } from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport userDefaultPhoto from \"../../../../asets/images/userDefaultPhoto.png\";\r\nimport ProfileStatusWithHooks from \"../../ProfileStatus/ProfileStatusWithHooks\";\r\nimport { useState } from 'react';\r\nimport ProfileDataReduxForm from './ProfileDataForm'\r\nimport { ProfileType, ContactsType} from '../../../../types/types';\r\nimport Preloader from '../../../common/preloader/preloader';\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    status: string\r\n    toggleIsFetching: (isFetching: boolean) => (void)\r\n    updateStatus: (newStatus: string) => void\r\n    updateProfileInfo: (formData: ProfileType, userId: number) => Promise<void>\r\n    savePhoto: (file: File) => (void)\r\n}\r\n\r\nconst ProfileInfo = (props: ProfileInfoType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    // Отображаем прелодер, если инфа о профайле еще не подгрузилась\r\n    if (!props.profile) {\r\n        return <><Preloader /></>;\r\n    }\r\n    // Обновление фото\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files !== null) {\r\n            props.savePhoto(e.target.files[0]);\r\n        }\r\n    };\r\n\r\n    // Редактирование профайла\r\n    const onSubmit = (formData: ProfileType) => {\r\n        props.updateProfileInfo(formData, props.profile.userId).then(\r\n            () => {\r\n                setEditMode(false);   \r\n            }\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <ProfileStatusWithHooks isOwner={props.isOwner} status={props.status} updateStatus={props.updateStatus}/>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={props.profile.photos.large || userDefaultPhoto} alt=\"ava\"></img>\r\n                {props.isOwner && <div>\r\n                    <input className={s.inputSendImage} id={\"input_file\"} type={\"file\"} onChange={onMainPhotoSelected} />\r\n                    <label className={s.btnSendImage} htmlFor={\"input_file\"}>Change avatar</label>\r\n                    </div>}\r\n                    {editMode \r\n                        ? <ProfileDataReduxForm initialValues={props.profile} profile={props.profile} onSubmit={onSubmit}/> \r\n                        : <ProfileData switchToEditMode={ () => {setEditMode(true)}} isOwner={props.isOwner} profile={props.profile}/>}\r\n                    \r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\ntype ProfileDataType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    switchToEditMode: () => (void)\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataType> = ({profile, isOwner, switchToEditMode}) => {\r\n    return <div>\r\n        <div>\r\n            <b>Full name: </b> {profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>About me: </b> {profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job: </b> {profile.lookingForAJob ? \"Yes\" : \"No\"}\r\n        </div>\r\n        <div>\r\n            <b>Job description: </b> {profile.lookingForAJobDescription}\r\n        </div>\r\n        <b>Contacts: </b> {\r\n            Object.keys(profile.contacts).map(key => {\r\n                    return profile.contacts[key as keyof ContactsType] && \r\n                    <Contacts key={key} contactMean={key} contactValue={profile.contacts[key as keyof ContactsType]} />\r\n            })\r\n        }\r\n        {isOwner && <button className={s.btnEditP} onClick={switchToEditMode}>Edit information</button>}\r\n    </div>\r\n};\r\n\r\ntype ContactsValuesType = {\r\n    contactMean: string\r\n    contactValue: string\r\n}\r\n\r\nconst Contacts: React.FC<ContactsValuesType> = ({ contactMean, contactValue }) => {\r\n    return <div className={s.Contacts}><b>{contactMean}</b>: {contactValue}</div>\r\n};\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css'\r\n\r\nconst Post = (props) => {\r\n  return (\r\n    <div className={s.item}>\r\n      <img src='https://cdn4.iconfinder.com/data/icons/halloween-colored-1/96/halloween_monster_zombie_96-512.png' alt=\"zombie ava\"></img>\r\n      {props.message}\r\n      <div>\r\n        <span>like {props.likeCount}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/Post';\r\nimport {reduxForm, InjectedFormProps} from \"redux-form\";\r\nimport {maxLengthCreator, requiredField} from \"../../../utils/validators/validators\";\r\nimport {TextArea, createCustomField} from \"../../../utils/validators/customTextArea\";\r\nimport { PostType } from '../../../types/types';\r\n\r\ntype PropsType = {\r\n    posts: Array<PostType>\r\n    addPost: (postTxtValue: string) => void\r\n}\r\n\r\nconst MyPosts: React.FC<PropsType> = (props) => {\r\n\r\n    // создание массива тегов с постами для рендера\r\n    let formatedPostsData = props.posts.map((elem) => {\r\n        return <Post key={elem.id} message={elem.message} likeCount={elem.likeCount}/>;\r\n    });\r\n\r\n    // обработка события Publish Post\r\n    const onSubmit = (formData: PostFormValuesType) => {\r\n        let {postTxtValue} = formData;\r\n        props.addPost(postTxtValue);\r\n    };\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <PublishPostReduxForm onSubmit={onSubmit}/>\r\n            <div className={s.posts}>\r\n                {formatedPostsData}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nlet maxLength = maxLengthCreator(50);\r\n\r\ntype PostFormValuesType = {\r\n    postTxtValue: string\r\n}\r\ntype FormPropsType = {\r\n}\r\ntype FormKeysType = Extract<keyof PostFormValuesType, string>;\r\n\r\nconst PublishPostForm: React.FC<InjectedFormProps<PostFormValuesType,\r\nFormPropsType> & FormPropsType> = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            {createCustomField<FormKeysType>(\"Type something here\", \"postTxtValue\", TextArea, [requiredField, maxLength], s.inputPost)}\r\n        </div>\r\n        <div>\r\n            <button className={s.btnSendPost}>Add post</button>\r\n        </div>\r\n    </form>\r\n};\r\n                                            // a unique name for the form\r\nconst PublishPostReduxForm = reduxForm<PostFormValuesType, FormPropsType>({form: 'publishPostForm'})(PublishPostForm);\r\n\r\nexport default MyPosts;","import {profileActions} from \"../../../redux/profileReducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport { AppStateType } from \"../../../redux/reduxStore\";\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profileData.posts\r\n    };\r\n};\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, {addPost: profileActions.addPost})(MyPosts);\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./MyPosts/ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport s from \"./Profile.module.css\"\r\nimport { ProfileType } from '../../types/types';\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    status: string\r\n    toggleIsFetching: (isFetching: boolean) => (void)\r\n    updateStatus: (newStatus: string) => void\r\n    updateProfileInfo: (formData: ProfileType, userId: number) => Promise<void>\r\n    savePhoto: (file: File) => (void)\r\n}\r\n\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={s.profileBlock}>\r\n            <div className={s.profileInfo} >\r\n                <ProfileInfo isOwner={props.isOwner} profile={props.profile} status={props.status}\r\n                             updateStatus={props.updateStatus} toggleIsFetching={props.toggleIsFetching}\r\n                             savePhoto={props.savePhoto} updateProfileInfo={props.updateProfileInfo}/>\r\n            </div>\r\n            {props.isOwner && <div className={s.postContainer}>\r\n                <MyPostsContainer />\r\n            </div>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatusThunckCreator,\r\n        showUserProfileThunckCreator,\r\n        updateStatusThunckCreator,\r\n        saveProfilePhotoThunckCreator,\r\n        updateProfileThunckCreator, \r\n        profileActions} from \"../../redux/profileReducer\";\r\nimport {withRouter, RouteComponentProps} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {usersActions} from \"../../redux/usersReducer\";\r\nimport { AppStateType } from '../../redux/reduxStore';\r\nimport { ProfileType } from '../../types/types';\r\n\r\ntype MapStateToPropsType = {\r\n    userId: number\r\n    profile: ProfileType\r\n    status: string\r\n}\r\ntype MapDispatchToPropsType ={\r\n    toggleIsFetching: (isFetching: boolean) => (void)\r\n    updateStatus: (newStatus: string) => void\r\n    updateProfileInfo: (formData: ProfileType, userId: number) => Promise<void>\r\n    savePhoto: (file: File) => (void)\r\n    showUserProfile: (UserID: number) => void\r\n    getUserStatus: (UserID: number) => void\r\n    clearUserProfile: () => void\r\n}\r\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType & RouteComponentProps<PathParamsType>;\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile () {\r\n        // Берем параметр UserID из адресной строки\r\n        let UserID = +this.props.match.params.userId;\r\n        if (!UserID) UserID = this.props.userId;\r\n        if (UserID !== this.props.userId) {\r\n            this.props.clearUserProfile();    \r\n        }\r\n        this.props.showUserProfile(UserID);\r\n        this.props.getUserStatus(UserID);\r\n    }\r\n\r\n    // Первая отрисовка страницы\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    // Обновление компоненты\r\n    componentDidUpdate(prevProps: PropsType) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Profile isOwner ={!this.props.match.params.userId}\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateStatus={this.props.updateStatus}\r\n                updateProfileInfo={this.props.updateProfileInfo}\r\n                savePhoto={this.props.savePhoto}\r\n                toggleIsFetching={this.props.toggleIsFetching} />\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    userId: state.authData.userId,\r\n    profile: state.profileData.profile,\r\n    status: state.profileData.status\r\n});\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps,\r\n        {showUserProfile: showUserProfileThunckCreator,\r\n        getUserStatus: getStatusThunckCreator,\r\n        updateStatus: updateStatusThunckCreator,\r\n        savePhoto: saveProfilePhotoThunckCreator,\r\n        clearUserProfile: profileActions.clearUserProfile,\r\n        updateProfileInfo:updateProfileThunckCreator,\r\n        toggleIsFetching: usersActions.toggleIsFetching}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer);\r\n"],"sourceRoot":""}