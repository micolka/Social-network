{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Dialogs/Message/Message.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","authData","isAuthorised","withAuthRedirect","Component","RedirectComponent","this","props","restProps","to","React","connect","module","exports","DialogItem","className","s","dialogsItems","id","name","Message","message","src","alt","maxLength","maxLengthCreator","SendMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","createCustomField","TextArea","requiredField","inputMessage","btnSendMessage","Dialogs","formatedDialogData","dialogsData","dialogs","map","elem","formatedMessagesData","messages","formData","messTxtValue","addDialogMessage","compose","dialogsActions"],"mappings":"8NAKIA,EAA6B,SAACC,GAAD,MAA0B,CACvDC,OAAQD,EAAME,SAASC,eAKdC,EAAmB,SAACC,GAAoC,IAC3DC,EAD0D,iLAEjD,IAAD,EACuBC,KAAKC,MAA7BP,EADC,EACDA,OAAWQ,EADV,0BAEN,OAAKR,EACE,kBAACI,EAAeI,GADH,kBAAC,IAAD,CAAUC,GAAI,eAJsB,GAChCC,IAAMN,WAQtC,OAAOO,YAAQb,EAARa,CAAoCN,K,oBCnB/CO,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,aAAe,8BAA8B,eAAiB,kC,oBCAtOD,EAAOC,QAAU,CAAC,QAAU,4BAA4B,aAAe,iCAAiC,OAAS,6B,oBCAjHD,EAAOC,QAAU,CAAC,SAAW,0BAA0B,QAAU,2B,gHCiBlDC,EATyB,SAACP,GACrC,OACI,yBAAKQ,UAAWC,IAAEC,cACd,kBAAC,IAAD,CAASR,GAAI,YAAcF,EAAMW,IAAKX,EAAMY,Q,kBCMzCC,EAVsB,SAACb,GAClC,OACI,yBAAKQ,UAAWC,IAAEK,SACd,yBACIC,IAAI,wEAAwEC,IAAI,UACpF,8BAAOhB,EAAMc,W,yBCgCrBG,EAAYC,YAAiB,KAqB3BC,EAAuBC,YAAoD,CAACC,KAAM,mBAA3DD,EAXK,SAACpB,GAC/B,OAAO,0BAAMsB,SAAUtB,EAAMuB,cACzB,6BACKC,YAAgC,qBAAsB,eAAgBC,IAAU,CAACC,IAAeT,GAAYR,IAAEkB,eAEnH,6BACI,4BAAQnB,UAAWC,IAAEmB,gBAArB,aAOGC,EArDsB,SAAC7B,GAGlC,IAAI8B,EAAqB9B,EAAM+B,YAAYC,QAAQC,KAAI,SAACC,GACpD,OAAO,kBAAC,EAAD,CAAYtB,KAAMsB,EAAKtB,KAAMD,GAAIuB,EAAKvB,QAG7CwB,EAAuBnC,EAAM+B,YAAYK,SAASH,KAAI,SAACC,GACvD,OAAO,kBAAC,EAAD,CAASpB,QAASoB,EAAKpB,QAASH,GAAIuB,EAAKvB,QASpD,OACI,yBAAKH,UAAWC,IAAEuB,SACd,yBAAKxB,UAAWC,IAAEC,cACboB,GAEL,yBAAKtB,UAAWC,IAAE2B,UACbD,EACD,kBAAChB,EAAD,CAAsBG,SAZjB,SAACe,GAAyC,IAClDC,EAAgBD,EAAhBC,aACLtC,EAAMuC,iBAAiBD,S,wBChBhBE,sBACXpC,aAPoB,SAACZ,GACrB,MAAO,CACHuC,YAAavC,EAAMuC,eAKE,CAACQ,iBAAkBE,IAAeF,mBAC3D3C,IAFW4C,CAGbX","file":"static/js/4.fd302a4a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport { AppStateType } from \"../redux/reduxStore\";\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.authData.isAuthorised\r\n});\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToPropsForRedirect>;\r\n\r\nexport const withAuthRedirect = (Component: React.ComponentType) => {\r\n    class RedirectComponent extends React.Component<MapPropsType> {\r\n        render () {\r\n            let {isAuth, ...restProps} = this.props;\r\n            if (!isAuth) return <Redirect to={\"/login\"}/>;\r\n            return <Component  {...restProps}/>\r\n        }\r\n    }\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__12HX7\",\"dialogsItems\":\"Dialogs_dialogsItems__2EKR9\",\"active\":\"Dialogs_active__2OfC7\",\"messages\":\"Dialogs_messages__1O0BJ\",\"inputMessage\":\"Dialogs_inputMessage__3SgSD\",\"btnSendMessage\":\"Dialogs_btnSendMessage__2EXCb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"DialogItem_dialogs__2Cr-H\",\"dialogsItems\":\"DialogItem_dialogsItems__P02DH\",\"active\":\"DialogItem_active__3hPhD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messages\":\"Message_messages__pbb-I\",\"message\":\"Message_message__1yHBd\"};","import React from \"react\";\r\nimport s from './DialogItem.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nconst DialogItem: React.FC<PropsType> = (props:any) => {\r\n    return (\r\n        <div className={s.dialogsItems}>\r\n            <NavLink to={\"/dialogs/\" + props.id}>{props.name}</NavLink>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from './Message.module.css'\r\n\r\ntype PropsType = {\r\n    message: string\r\n    id: number\r\n}\r\n\r\nconst Message: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={s.message}>\r\n            <img\r\n                src='https://cdn3.iconfinder.com/data/icons/avatars-15/64/_Ninja-2-512.png' alt=\"ninja\"></img>\r\n            <span>{props.message}</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Message;","import React from \"react\";\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from './DialogItem/DialogItem'\r\nimport Message from \"./Message/Message\";\r\nimport {reduxForm, InjectedFormProps} from \"redux-form\";\r\nimport {maxLengthCreator, requiredField} from \"../../utils/validators/validators\";\r\nimport {TextArea, createCustomField} from \"../../utils/validators/customTextArea\";\r\nimport { DialogType, MessagesType } from \"../../types/types\";\r\nimport { InitialStateType } from \"../../redux/dialogsReducer\";\r\n\r\ntype PropsType = {\r\n    dialogsData: InitialStateType\r\n    addDialogMessage: (messTxtValue: string) => void\r\n}\r\n\r\nconst Dialogs: React.FC<PropsType> = (props) => {\r\n\r\n    // данные для отрисовки списка чатов на странице Messages\r\n    let formatedDialogData = props.dialogsData.dialogs.map((elem: DialogType) => {\r\n        return <DialogItem name={elem.name} id={elem.id}/>;\r\n    });\r\n    // данные для отрисовки списка сообщений на странице Messages\r\n    let formatedMessagesData = props.dialogsData.messages.map((elem: MessagesType) => {\r\n        return <Message message={elem.message} id={elem.id}/>\r\n    });\r\n\r\n    // обработка события Send Message\r\n    const onSubmit = (formData: SendMessageFormValuesType) => {\r\n        let {messTxtValue} = formData;\r\n        props.addDialogMessage(messTxtValue);\r\n    };\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {formatedDialogData}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {formatedMessagesData}\r\n                <SendMessageReduxForm onSubmit={onSubmit}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nlet maxLength = maxLengthCreator(100);\r\n\r\ntype SendMessageFormValuesType = {\r\n    messTxtValue: string\r\n}\r\ntype FormPropsType = {\r\n}\r\ntype FormKeysType = Extract<keyof SendMessageFormValuesType, string>;\r\n\r\nconst SendMessageForm: React.FC<InjectedFormProps<SendMessageFormValuesType,\r\nFormPropsType> & FormPropsType> = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            {createCustomField<FormKeysType>(\"Say hello to momy!\", \"messTxtValue\", TextArea, [requiredField, maxLength], s.inputMessage)}\r\n        </div>\r\n        <div>\r\n            <button className={s.btnSendMessage}>Send</button>\r\n        </div>\r\n    </form>\r\n};\r\n                                            //  a unique name for the form\r\nconst SendMessageReduxForm = reduxForm<SendMessageFormValuesType, FormPropsType>({form: 'sendMessageForm'})(SendMessageForm);\r\n\r\nexport default Dialogs;","import {dialogsActions} from \"../../redux/dialogsReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport { AppStateType } from \"../../redux/reduxStore\";\r\n\r\nconst mapToStateProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsData: state.dialogsData\r\n    };\r\n};\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapToStateProps, {addDialogMessage: dialogsActions.addDialogMessage}),\r\n    withAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}